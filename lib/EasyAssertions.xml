<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EasyAssertions</name>
    </assembly>
    <members>
        <member name="P:EasyAssertions.Expected.Expression">
            <summary>
            The source representation of the expected value.
            </summary>
        </member>
        <member name="P:EasyAssertions.Expected.Value">
            <summary>
            The expected value.
            </summary>
        </member>
        <member name="T:EasyAssertions.IFailureMessageFormatter">
            <summary>
            The standard set of assertion failure messages.
            </summary>
        </member>
        <member name="M:EasyAssertions.IFailureMessageFormatter.NotEqual(System.Object,System.Object,System.String)">
            <summary>
            Objects should be equal, but weren't.
            </summary>
        </member>
        <member name="M:EasyAssertions.IFailureMessageFormatter.NotEqual(System.String,System.String,System.String)">
            <summary>
            Strings should be equal, but weren't.
            </summary>
        </member>
        <member name="M:EasyAssertions.IFailureMessageFormatter.AreEqual(System.Object,System.Object,System.String)">
            <summary>
            Objects should not be equal, but were.
            </summary>
        </member>
        <member name="M:EasyAssertions.IFailureMessageFormatter.IsNull(System.String)">
            <summary>
            Object should not be null, but was.
            </summary>
        </member>
        <member name="M:EasyAssertions.IFailureMessageFormatter.NotSame(System.Object,System.Object,System.String)">
            <summary>
            Objects should be the same instance, but weren't.
            </summary>
        </member>
        <member name="M:EasyAssertions.IFailureMessageFormatter.AreSame(System.Object,System.String)">
            <summary>
            Objects should not be the same instance, but were.
            </summary>
        </member>
        <member name="M:EasyAssertions.IFailureMessageFormatter.DoNotMatch``2(System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1,System.Boolean},System.String)">
            <summary>
            Sequences should match, but didn't.
            </summary>
        </member>
        <member name="M:EasyAssertions.IFailureMessageFormatter.DoesNotContain(System.Object,System.Collections.IEnumerable,System.String,System.String)">
            <summary>
            Sequence should contain a particular item, but didn't.
            </summary>
        </member>
        <member name="M:EasyAssertions.IFailureMessageFormatter.DoesNotContainItems(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String)">
            <summary>
            Sequence should contain all the items in another sequence, but didn't.
            </summary>
        </member>
        <member name="M:EasyAssertions.IFailureMessageFormatter.Contains(System.Object,System.Collections.IEnumerable,System.String,System.String)">
            <summary>
            Sequence should not contain a particular item, but did.
            </summary>
        </member>
        <member name="M:EasyAssertions.IFailureMessageFormatter.Contains(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String)">
            <summary>
            Sequence should not contain any of the items in another sequence, but did.
            </summary>
        </member>
        <member name="M:EasyAssertions.IFailureMessageFormatter.DoesNotOnlyContain(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String)">
            <summary>
            Sequence should only contain the items in another sequence,
            but was missing at least one item, or had extra items.
            </summary>
        </member>
        <member name="M:EasyAssertions.IFailureMessageFormatter.ItemsNotSame(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String)">
            <summary>
            Sequence should contain the same object references, in the same order, as another sequence, but didn't.
            </summary>
        </member>
        <member name="M:EasyAssertions.IFailureMessageFormatter.NoException(System.Type,System.Linq.Expressions.LambdaExpression,System.String)">
            <summary>
            Function should throw an exception, but didn't.
            </summary>
        </member>
        <member name="M:EasyAssertions.IFailureMessageFormatter.WrongException(System.Type,System.Type,System.Linq.Expressions.LambdaExpression,System.String)">
            <summary>
            Function should throw a particular exception type, but threw a different one.
            </summary>
        </member>
        <member name="M:EasyAssertions.IFailureMessageFormatter.NotEmpty(System.Collections.IEnumerable,System.String)">
            <summary>
            Sequence should be empty, but wasn't.
            </summary>
        </member>
        <member name="M:EasyAssertions.IFailureMessageFormatter.IsEmpty(System.String)">
            <summary>
            Sequence should not be empty, but was.
            </summary>
        </member>
        <member name="M:EasyAssertions.IFailureMessageFormatter.LengthMismatch(System.Int32,System.Collections.IEnumerable,System.String)">
            <summary>
            Sequence should be a specific length, but wasn't.
            </summary>
        </member>
        <member name="M:EasyAssertions.IFailureMessageFormatter.DoesNotContain(System.String,System.String,System.String)">
            <summary>
            String should contain a particular substring, but didn't.
            </summary>
        </member>
        <member name="M:EasyAssertions.IFailureMessageFormatter.Contains(System.String,System.String,System.String)">
            <summary>
            String should not contain a particular substring, but did.
            </summary>
        </member>
        <member name="M:EasyAssertions.IFailureMessageFormatter.DoesNotStartWith(System.String,System.String,System.String)">
            <summary>
            String should start with a particular substring, but didn't.
            </summary>
        </member>
        <member name="M:EasyAssertions.IFailureMessageFormatter.DoesNotEndWith(System.String,System.String,System.String)">
            <summary>
            String should end with a particular substring, but didn't.
            </summary>
        </member>
        <member name="M:EasyAssertions.IFailureMessageFormatter.NotGreaterThan(System.Object,System.Object,System.String)">
            <summary>
            Value should be greater than another value, but wasn't.
            </summary>
        </member>
        <member name="M:EasyAssertions.IFailureMessageFormatter.NotLessThan(System.Object,System.Object,System.String)">
            <summary>
            Value should be less than another value, but wasn't.
            </summary>
        </member>
        <member name="T:EasyAssertions.NumberAssertions">
            <summary>
            Number-related assertions.
            </summary>
        </member>
        <member name="M:EasyAssertions.NumberAssertions.ShouldBe(System.Object,System.Single,System.Single,System.String)">
            <summary>
            Asserts that two <see cref="T:System.Single"/> values are within a specified tolerance of eachother.
            </summary>
        </member>
        <member name="M:EasyAssertions.NumberAssertions.ShouldNotBe(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Asserts that two <see cref="T:System.Single"/> values are not within a specified tolerance of eachother.
            </summary>
        </member>
        <member name="M:EasyAssertions.NumberAssertions.ShouldBe(System.Object,System.Double,System.Double,System.String)">
            <summary>
            Asserts that two <see cref="T:System.Double"/> values are within a specified tolerance of eachother.
            </summary>
        </member>
        <member name="M:EasyAssertions.NumberAssertions.ShouldNotBe(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Asserts that two <see cref="T:System.Double"/> values are not within a specified tolerance of eachother.
            </summary>
        </member>
        <member name="M:EasyAssertions.NumberAssertions.ShouldBeGreaterThan``2(``0,``1,System.String)">
            <summary>
            Asserts that one value is greater than another.
            </summary>
        </member>
        <member name="M:EasyAssertions.NumberAssertions.ShouldBeLessThan``2(``0,``1,System.String)">
            <summary>
            Asserts that one value is less than another.
            </summary>
        </member>
        <member name="M:EasyAssertions.NumberAssertions.ShouldBeNaN(System.Single,System.String)">
            <summary>
            Asserts that a <see cref="T:System.Single"/> value is NaN.
            </summary>
        </member>
        <member name="M:EasyAssertions.NumberAssertions.ShouldNotBeNaN(System.Single,System.String)">
            <summary>
            Asserts that a <see cref="T:System.Single"/> value is not NaN.
            </summary>
        </member>
        <member name="M:EasyAssertions.NumberAssertions.ShouldBeNaN(System.Double,System.String)">
            <summary>
            Asserts that a <see cref="T:System.Double"/> value is NaN.
            </summary>
        </member>
        <member name="M:EasyAssertions.NumberAssertions.ShouldNotBeNaN(System.Double,System.String)">
            <summary>
            Asserts that a <see cref="T:System.Double"/> value is not NaN.
            </summary>
        </member>
        <member name="M:EasyAssertions.Compare.ObjectsAreEqual``1(``0,``0)">
            <summary>
            Determines whether two objects are equal, using the default equality comparer.
            </summary>
        </member>
        <member name="M:EasyAssertions.Compare.AreWithinTolerance(System.Single,System.Single,System.Single)">
            <summary>
            Determines whether the difference between two <see cref="T:System.Single"/> values is less than or equal to a given tolerance.
            </summary>
        </member>
        <member name="M:EasyAssertions.Compare.AreWithinTolerance(System.Double,System.Double,System.Double)">
            <summary>
            Determines whether the difference between two <see cref="T:System.Double"/> values is less than or equal to a given tolerance.
            </summary>
        </member>
        <member name="M:EasyAssertions.Compare.CollectionsMatch(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Func{System.Object,System.Object,System.Boolean})">
            <summary>
            Determines whether two sequences contain the same items in the same order.
            <see cref="T:System.Collections.IEnumerable"/> items are compared recursively.
            Non-<c>IEnumerable</c> items are compared using the default equality comparer.
            </summary>
        </member>
        <member name="M:EasyAssertions.Compare.ObjectsMatch``2(``0,``1)">
            <summary>
            Determines whether two objects are equivalent.
            <see cref="T:System.Collections.IEnumerable"/> items are compared recursively.
            Non-<c>IEnumerable</c> items are compared using the default equality comparer.
            </summary>
        </member>
        <member name="M:EasyAssertions.Compare.IsEmpty``1(``0)">
            <summary>
            Returns true if a sequence does not contain any elements.
            </summary>
        </member>
        <member name="M:EasyAssertions.Compare.ContainsAllItems(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Determines whether a sequence contains all of the items in another sequence.
            </summary>
        </member>
        <member name="M:EasyAssertions.Compare.ContainsAny(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Determines whether a sequence contains any of the items in another sequence.
            </summary>
        </member>
        <member name="M:EasyAssertions.Compare.ContainsOnlyExpectedItems(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Determines whether a sequence contains all of the items in another sequence, and no other items.
            </summary>
        </member>
        <member name="T:EasyAssertions.FunctionFailureMessage">
            <summary>
            A helper class for building function and exception assertion failure messages in a consistent format.
            </summary>
        </member>
        <member name="T:EasyAssertions.FailureMessage">
            <summary>
            A helper class for building assertion failure messages in a consistent format.
            <see cref="M:EasyAssertions.FailureMessage.ToString"/> formats the provided <see cref="P:EasyAssertions.FailureMessage.MessageTemplate"/> with the properties of the <c>FailureMessage</c>.
            </summary>
        </member>
        <member name="M:EasyAssertions.FailureMessage.ToString">
            <summary>
            Formats the provided <see cref="P:EasyAssertions.FailureMessage.MessageTemplate"/> with the properties of the <see cref="T:EasyAssertions.FailureMessage"/>.
            Prepends the message with the <see cref="P:EasyAssertions.FailureMessage.ActualExpression"/> on its own line.
            Appends the <see cref="P:EasyAssertions.FailureMessage.UserMessage"/> string on a new line if one is supplied.
            </summary>
        </member>
        <member name="F:EasyAssertions.FailureMessage.RawActualValue">
            <summary>
            Provides access to the actual value without modification.
            </summary>
        </member>
        <member name="F:EasyAssertions.FailureMessage.BR">
            <summary>
            A handy alias to <see cref="P:System.Environment.NewLine"/> that can be used inside the <see cref="P:EasyAssertions.FailureMessage.MessageTemplate"/>.
            </summary>
        </member>
        <member name="M:EasyAssertions.FailureMessage.Output(System.Object)">
            <summary>
            Wraps objects in &lt; &gt; and strings in " ", and escapes the result for SmartFormat.
            </summary>
        </member>
        <member name="M:EasyAssertions.FailureMessage.EscapeForTemplate(System.String)">
            <summary>
            Escapes a string value for SmartFormat so that it isn't interpreted as part of the template.
            </summary>
        </member>
        <member name="P:EasyAssertions.FailureMessage.MessageTemplate">
            <summary>
            A SmartFormat format string used to build the resulting failure message.
            The message should continue naturally from the source representation of the actual value.
            E.g. "should be empty."
            </summary>
            <remarks>
            See https://github.com/scottrippey/SmartFormat/wiki and http://www.codeproject.com/Articles/42310/Custom-Formatting-in-NET-Enhancing-String-Format-t
            for more information about the SmartFormat syntax.
            Note that { and } should be escaped as \{ and \}, rather than doubling the braces as in .NET composite format strings.
            </remarks>
        </member>
        <member name="P:EasyAssertions.FailureMessage.RawExpectedValue">
            <summary>
            Provides access to the expected value without modification.
            </summary>
        </member>
        <member name="P:EasyAssertions.FailureMessage.ExpectedValue">
            <summary>
            The value that the actual value was compared against.
            Objects are wrapped in &lt; &gt; and strings are wrapped in " ".
            </summary>
        </member>
        <member name="P:EasyAssertions.FailureMessage.ActualValue">
            <summary>
            The value being asserted on.
            Objects are wrapped in &lt; &gt; and strings are wrapped in " ".
            </summary>
        </member>
        <member name="P:EasyAssertions.FailureMessage.UserMessage">
            <summary>
            A user-provided message that will be appended to the message output.
            </summary>
        </member>
        <member name="P:EasyAssertions.FailureMessage.Expected">
            <summary>
            When referenced in the <see cref="P:EasyAssertions.FailureMessage.MessageTemplate"/>, will output the <see cref="P:EasyAssertions.FailureMessage.ExpectedExpression"/>,
            with the <see cref="P:EasyAssertions.FailureMessage.ExpectedValue"/> aligned underneath it. If <c>ExpectedExpression</c> returns null,
            only <c>ExpectedValue</c> will be output.
            </summary>
            <remarks>
            Expected can be referenced in the <see cref="P:EasyAssertions.FailureMessage.MessageTemplate"/> as just "{Expected}".
            Alternatively, a format for the expected value can be specified after a colon like so:
                "{Expected:format_string}"
            </remarks>
        </member>
        <member name="P:EasyAssertions.FailureMessage.ActualExpression">
            <summary>
            The source representation of the actual value.
            </summary>
        </member>
        <member name="P:EasyAssertions.FailureMessage.ExpectedExpression">
            <summary>
            The source representation of the expected value.
            Returns null if the source representation is the same as the value output
            (e.g. if the source was a literal value)
            </summary>
        </member>
        <member name="P:EasyAssertions.FailureMessage.FailureIndex">
            <summary>
            For providing positioning information about the assertion failure.
            </summary>
        </member>
        <member name="P:EasyAssertions.FunctionFailureMessage.Function">
            <summary>
            The function being asserted on.
            </summary>
        </member>
        <member name="P:EasyAssertions.FunctionFailureMessage.ActualExpression">
            <summary>
            Outputs the source representation of the <see cref="P:EasyAssertions.FunctionFailureMessage.Function"/>.
            </summary>
        </member>
        <member name="P:EasyAssertions.FunctionFailureMessage.ExpectedExceptionType">
            <summary>
            The <see cref="T:System.Type"/> of exception that the <see cref="P:EasyAssertions.FunctionFailureMessage.Function"/> was expected to throw.
            </summary>
        </member>
        <member name="P:EasyAssertions.FunctionFailureMessage.ExpectedExceptionName">
            <summary>
            The <see cref="P:System.Reflection.MemberInfo.Name"/> of the <see cref="P:EasyAssertions.FunctionFailureMessage.ExpectedExceptionType"/>, wrapped in &lt; &gt;.
            </summary>
        </member>
        <member name="P:EasyAssertions.FunctionFailureMessage.ActualExceptionType">
            <summary>
            The <see cref="T:System.Type"/> of exception that the <see cref="P:EasyAssertions.FunctionFailureMessage.Function"/> threw.
            </summary>
        </member>
        <member name="P:EasyAssertions.FunctionFailureMessage.ActualExceptionName">
            <summary>
            The <see cref="P:System.Reflection.MemberInfo.Name"/> of the <see cref="P:EasyAssertions.FunctionFailureMessage.ActualExceptionType"/>, wrapped in &lt; &gt;.
            </summary>
        </member>
        <member name="T:EasyAssertions.EasyAssertion">
            <summary>
            Framework methods for chaining assertions, defining new assertions, or customizing assertion exceptions.
            </summary>
        </member>
        <member name="M:EasyAssertions.EasyAssertion.Assert``1(``0,System.Action{``0})">
            <summary>
            Provides access to an object's child properties without changing the assertion chaining context.
            </summary>
        </member>
        <member name="M:EasyAssertions.EasyAssertion.And``1(EasyAssertions.Actual{``0},System.Action{``0})">
            <summary>
            Provides access to an object's child properties without changing the assertion chaining context.
            </summary>
        </member>
        <member name="M:EasyAssertions.EasyAssertion.RegisterAssert``1(``0,System.Action)">
            <summary>
            Registers an assertion action for purposes of tracking the current position in the assertion expression's source code.
            Use this for custom assertions that act directly on the actual value.
            </summary>
        </member>
        <member name="M:EasyAssertions.EasyAssertion.RegisterAssert``1(``0,System.Action{``0})">
            <summary>
            Registers an assertion action with a named parameter for following the assertion expression into the action.
            Use this for custom assertions that call other existing assertions.
            </summary>
        </member>
        <member name="M:EasyAssertions.EasyAssertion.RegisterAssert``1(``0,System.Func{``0,EasyAssertions.Actual{``0}})">
            <summary>
            Registers an assertion function with a named parameter for following the assertion expression into the function.
            Use this for custom assertions that call other existing assertions.
            </summary>
            <returns>
            The return value of the registered assertion function.
            </returns>
        </member>
        <member name="M:EasyAssertions.EasyAssertion.RegisterIndexedAssert(System.Int32,System.Reflection.MethodInfo,System.Action)">
            <summary>
            Registers an assertion action that is associated with an index into the actual object.
            The first parameter of the item assertion method is assumed to be the actual value.
            Use this when executing a user-provided assertion on an item in a sequence.
            </summary>
        </member>
        <member name="M:EasyAssertions.EasyAssertion.RegisterInnerAssert(System.Reflection.MethodInfo,System.Action)">
            <summary>
            Registers an assertion action to be executed from within another assertion method,
            for purposes of following the assertion expression into the inner assertion method.
            The first parameter of the item assertion method is assumed to be the actual value.
            Use this when executing a user-provided assertion.
            </summary>
        </member>
        <member name="M:EasyAssertions.EasyAssertion.UseFrameworkExceptions(System.Func{System.String,System.Exception},System.Func{System.String,System.Exception,System.Exception})">
            <summary>
            Overrides the expceptions used when assertions fail.
            Test frameworks will detect their own exception types and display the correct assertion failure messages.
            </summary>
        </member>
        <member name="M:EasyAssertions.EasyAssertion.UseEasyAssertionExceptions">
            <summary>
            Throw <see cref="T:EasyAssertions.EasyAssertionException"/>s when assertions fail.
            </summary>
        </member>
        <member name="M:EasyAssertions.EasyAssertion.Failure(System.String)">
            <summary>
            Creates an <see cref="T:System.Exception"/> to be thrown for a failed assertion.
            </summary>
        </member>
        <member name="M:EasyAssertions.EasyAssertion.Failure(System.String,System.Exception)">
            <summary>
            Creates an <see cref="T:System.Exception"/> to be thrown for a failed assertion.
            </summary>
        </member>
        <member name="T:EasyAssertions.EasyAssertionException">
            <summary>
            The default exception type thrown by failed assertions.
            The type of exceptions thrown can be changed using <see cref="M:EasyAssertions.EasyAssertion.UseFrameworkExceptions(System.Func{System.String,System.Exception},System.Func{System.String,System.Exception,System.Exception})">EasyAssertion.UseFrameworkExceptions</see>.
            </summary>
        </member>
        <member name="T:EasyAssertions.CollectionAssertions">
            <summary>
            Collection-related assertions.
            </summary>
        </member>
        <member name="M:EasyAssertions.CollectionAssertions.ShouldBeEmpty``1(``0,System.String)">
            <summary>
            Asserts that a sequence has no elements in it.
            </summary>
        </member>
        <member name="M:EasyAssertions.CollectionAssertions.ShouldNotBeEmpty``1(``0,System.String)">
            <summary>
            Asserts that a sequence contains at least one element.
            </summary>
        </member>
        <member name="M:EasyAssertions.CollectionAssertions.ShouldBeSingular``1(``0,System.String)">
            <summary>
            Asserts that a sequnce contains exactly one element.
            </summary>
        </member>
        <member name="M:EasyAssertions.CollectionAssertions.ShouldBeLength``1(``0,System.Int32,System.String)">
            <summary>
            Asserts that a sequence contains a specific number of elements.
            </summary>
        </member>
        <member name="M:EasyAssertions.CollectionAssertions.ShouldMatch``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.String)">
            <summary>
            Asserts that two sequences contain the same items in the same order.
            <see cref="T:System.Collections.IEnumerable"/> items are compared recursively.
            Non-<c>IEnumerable</c> items are compared using the default equality comparer.
            </summary>
        </member>
        <member name="M:EasyAssertions.CollectionAssertions.ShouldMatch``2(System.Collections.Generic.IEnumerable{``0},``1[])">
            <summary>
            Asserts that a sequence contains the specified items in the specified order.
            <see cref="T:System.Collections.IEnumerable"/> items are compared recursively.
            Non-<c>IEnumerable</c> items are compared using the default equality comparer.
            </summary>
        </member>
        <member name="M:EasyAssertions.CollectionAssertions.ShouldMatch(System.Collections.Generic.IEnumerable{System.Single},System.Collections.Generic.IEnumerable{System.Single},System.Single,System.String)">
            <summary>
            Asserts that two sequences contain the same <see cref="T:System.Single"/> values (within a specified tolerance), in the same order.
            </summary>
        </member>
        <member name="M:EasyAssertions.CollectionAssertions.ShouldMatch(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Double,System.String)">
            <summary>
            Asserts that two sequences contain the same <see cref="T:System.Double"/> values (within a specified tolerance), in the same order.
            </summary>
        </member>
        <member name="M:EasyAssertions.CollectionAssertions.ShouldMatch``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,System.Boolean},System.String)">
            <summary>
            Asserts that two sequences contain the same items in the same order, using a custom equality function.
            </summary>
        </member>
        <member name="M:EasyAssertions.CollectionAssertions.ShouldContain``2(System.Collections.Generic.IEnumerable{``0},``1,System.String)">
            <summary>
            Asserts that a sequence contains a specified element, using the default equality comparer.
            </summary>
        </member>
        <member name="M:EasyAssertions.CollectionAssertions.ShouldContainItems``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.String)">
            <summary>
            Asserts that a sequence contains all specified elements, in any order, using the default equality comparer.
            </summary>
        </member>
        <member name="M:EasyAssertions.CollectionAssertions.ShouldNotContain``2(``0,``1,System.String)">
            <summary>
            Asserts that a sequence does not contain a specified element, using the default equality comparer.
            </summary>
        </member>
        <member name="M:EasyAssertions.CollectionAssertions.ShouldNotContainItems``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.String)">
            <summary>
            Asserts that a sequence does not contain any of the specified elements, using the default equality comparer.
            </summary>
        </member>
        <member name="M:EasyAssertions.CollectionAssertions.ShouldOnlyContain``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.String)">
            <summary>
            Asserts thats a sequence only contains the specified elements, and nothing else, in any order, using the default equality comparer.
            </summary>
        </member>
        <member name="M:EasyAssertions.CollectionAssertions.ShouldMatchReferences``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.String)">
            <summary>
            Asserts that two sequences contain the same object instances in the same order.
            </summary>
        </member>
        <member name="M:EasyAssertions.CollectionAssertions.ShouldMatchReferences``2(System.Collections.Generic.IEnumerable{``0},``1[])">
            <summary>
            Asserts that a sequence contains the specified object instances in the same order.
            </summary>
        </member>
        <member name="M:EasyAssertions.CollectionAssertions.ShouldContainKey``2(System.Collections.ObjectModel.KeyedCollection{``0,``1},``0,System.String)">
            <summary>
            Asserts that a <see cref="T:System.Collections.ObjectModel.KeyedCollection`2"/> contains an item for the specified key.
            </summary>
        </member>
        <member name="M:EasyAssertions.CollectionAssertions.ShouldNotContainKey``2(System.Collections.ObjectModel.KeyedCollection{``0,``1},``0,System.String)">
            <summary>
            Asserts that a <see cref="T:System.Collections.ObjectModel.KeyedCollection`2"/> does not contain an item for the specified key.
            </summary>
        </member>
        <member name="M:EasyAssertions.CollectionAssertions.ItemsSatisfy``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0}[])">
            <summary>
            Asserts that a sequence of items satisfies a matched sequence of assertions.
            </summary>
        </member>
        <member name="M:EasyAssertions.CollectionAssertions.AllItemsSatisfy``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Asserts that all items in a sequence satisfy a specified assertion.
            </summary>
        </member>
        <member name="T:EasyAssertions.Should">
            <summary>
            Provides assertions on functions, which are unwieldly to pass into extension methods.
            </summary>
        </member>
        <member name="M:EasyAssertions.Should.Throw``1(System.Linq.Expressions.Expression{System.Func{System.Object}},System.String)">
            <summary>
            Assert that a function will throw an exception.
            </summary>
        </member>
        <member name="M:EasyAssertions.Should.Throw``1(System.Linq.Expressions.Expression{System.Action},System.String)">
            <summary>
            Assert that an action will throw an exception.
            </summary>
        </member>
        <member name="T:EasyAssertions.ObjectAssertions">
            <summary>
            Generic assertions.
            </summary>
        </member>
        <member name="M:EasyAssertions.ObjectAssertions.ShouldBe``2(``0,``1,System.String)">
            <summary>
            Asserts that two objects are equal, using the default equality comparer.
            </summary>
        </member>
        <member name="M:EasyAssertions.ObjectAssertions.ShouldBe``1(System.Nullable{``0},``0,System.String)">
            <summary>
            Asserts that a nullable value is equal to another value, using the default equality comparer.
            </summary>
        </member>
        <member name="M:EasyAssertions.ObjectAssertions.ShouldNotBe``2(``0,``1,System.String)">
            <summary>
            Asserts that two objects are not equal, using the default equality comparer.
            </summary>
        </member>
        <member name="M:EasyAssertions.ObjectAssertions.ShouldBeNull``1(``0,System.String)">
            <summary>
            Asserts that the given object is a null reference.
            </summary>
        </member>
        <member name="M:EasyAssertions.ObjectAssertions.ShouldNotBeNull``1(``0,System.String)">
            <summary>
            Asserts that the given object is not a null reference.
            </summary>
        </member>
        <member name="M:EasyAssertions.ObjectAssertions.ShouldReferTo``2(``0,``1,System.String)">
            <summary>
            Asserts that two object instances are the same instance.
            </summary>
        </member>
        <member name="M:EasyAssertions.ObjectAssertions.ShouldNotReferTo``2(``0,``1,System.String)">
            <summary>
            Asserts that two object instances are different instances.
            </summary>
        </member>
        <member name="M:EasyAssertions.ObjectAssertions.ShouldBeA``1(System.Object,System.String)">
            <summary>
            Asserts that an object is assignable to a specified type.
            </summary>
        </member>
        <member name="T:EasyAssertions.StringAssertions">
            <summary>
            String-related assertions.
            </summary>
        </member>
        <member name="M:EasyAssertions.StringAssertions.ShouldContain(System.String,System.String,System.String)">
            <summary>
            Asserts that a string contains a specified substring.
            </summary>
        </member>
        <member name="M:EasyAssertions.StringAssertions.ShouldNotContain(System.String,System.String,System.String)">
            <summary>
            Asserts that a string does not contain a specified substring.
            </summary>
        </member>
        <member name="M:EasyAssertions.StringAssertions.ShouldStartWith(System.String,System.String,System.String)">
            <summary>
            Asserts that a string begins with a specified substring.
            </summary>
        </member>
        <member name="M:EasyAssertions.StringAssertions.ShouldEndWith(System.String,System.String,System.String)">
            <summary>
            Asserts that a string ends with a specified substring.
            </summary>
        </member>
        <member name="T:EasyAssertions.StringFailureMessage">
            <summary>
            A helper class for building string assertion failure messages in a consistent format.
            </summary>
        </member>
        <member name="M:EasyAssertions.StringFailureMessage.GetSnippet(System.String)">
            <summary>
            Reduces a string down to a smaller snippet around the <see cref="P:EasyAssertions.FailureMessage.FailureIndex"/>,
            to avoid blowing out the size of the failure message. The result is escaped for SmartFormat.
            </summary>
        </member>
        <member name="M:EasyAssertions.StringFailureMessage.StringEscape(System.String)">
            <summary>
            Escapes new-lines in a string value for output in the failure message.
            </summary>
        </member>
        <member name="P:EasyAssertions.StringFailureMessage.ExpectedValue">
            <summary>
            The string value that the actual string value was compared against.
            Outputs a snippet of the string around the <see cref="P:EasyAssertions.FailureMessage.FailureIndex"/>, wrapped in " ".
            </summary>
        </member>
        <member name="P:EasyAssertions.StringFailureMessage.ActualValue">
            <summary>
            The string value being asserted on.
            Outputs a snippet of the string around the <see cref="P:EasyAssertions.FailureMessage.FailureIndex"/>, wrapped in " ".
            </summary>
        </member>
        <member name="P:EasyAssertions.StringFailureMessage.Arrow">
            <summary>
            Outputs a ^ character.
            When aligned with the actual or expected value in the <see cref="P:EasyAssertions.FailureMessage.MessageTemplate"/>,
            the ^ character will line up with the character at the <see cref="P:EasyAssertions.FailureMessage.FailureIndex"/>.
            </summary>
        </member>
        <member name="T:EasyAssertions.CollectionFailureMessage">
            <summary>
            A helper class for building collection assertion failure messages in a consistent format.
            </summary>
        </member>
        <member name="M:EasyAssertions.CollectionFailureMessage.Sample(System.Collections.Generic.ICollection{System.Object})">
            <summary>
            Returns a sample of the first ten items in the given collection,
            or "empty." if there are no items in the collection.
            </summary>
        </member>
        <member name="P:EasyAssertions.CollectionFailureMessage.ItemType">
            <summary>
            The nature of the item being asserted on (e.g. "key" or "value").
            </summary>
        </member>
        <member name="P:EasyAssertions.CollectionFailureMessage.RawExpectedItems">
            <summary>
            Provides access to the items in the expected collection without modification.
            </summary>
        </member>
        <member name="P:EasyAssertions.CollectionFailureMessage.ExpectedItems">
            <summary>
            The collection of items that the actual collection is being compared against.
            Objects are wrapped in &lt; &gt; and strings are wrapped in " ".
            </summary>
        </member>
        <member name="P:EasyAssertions.CollectionFailureMessage.RawActualItems">
            <summary>
            Provides access to the items in the actual collection without modification.
            </summary>
        </member>
        <member name="P:EasyAssertions.CollectionFailureMessage.ActualItems">
            <summary>
            The collection of items being asserted on.
            Objects are wrapped in &lt; &gt; and strings are wrapped in " ".
            </summary>
        </member>
        <member name="P:EasyAssertions.CollectionFailureMessage.ExpectedSample">
            <summary>
            Outputs a sample of the items in the <see cref="P:EasyAssertions.CollectionFailureMessage.ExpectedItems"/> collection,
            or "empty." if there are no items in the collection.
            </summary>
        </member>
        <member name="P:EasyAssertions.CollectionFailureMessage.ActualSample">
            <summary>
            Outputs a sample of the items in the <see cref="P:EasyAssertions.CollectionFailureMessage.ActualItems"/> collection,
            or "empty." if there are no items in the collection.
            </summary>
        </member>
        <member name="P:EasyAssertions.CollectionFailureMessage.ExpectedSampleItems">
            <summary>
            The first ten items of the <see cref="P:EasyAssertions.CollectionFailureMessage.ExpectedItems"/> collection,
            with ellipses appended to the end if the collection contains more items.
            </summary>
        </member>
        <member name="P:EasyAssertions.CollectionFailureMessage.ActualSampleItems">
            <summary>
            The first ten items of the <see cref="P:EasyAssertions.CollectionFailureMessage.ActualItems"/> collection,
            with ellipses appended to the end if the collection contains more items.
            </summary>
        </member>
        <member name="P:EasyAssertions.CollectionFailureMessage.ExpectedExpression">
            <summary>
            The source representation of the <see cref="P:EasyAssertions.CollectionFailureMessage.ExpectedItems"/> collection.
            Returns null if the source representation is a collection initializer.
            </summary>
        </member>
        <member name="T:EasyAssertions.TestExpression">
            <summary>
            Provides access to the source representations of the actual and expected values of the currently executing assertion.
            </summary>
        </member>
        <member name="M:EasyAssertions.TestExpression.GetActual">
            <summary>
            Builds the source representation of the value being asserted on.
            Assumes that all assertions are extension methods.
            </summary>
        </member>
        <member name="M:EasyAssertions.TestExpression.GetExpected">
            <summary>
            Builds the source representation of the value being compared against the actual value.
            Assumes that all assertions take the expected value as the first parameter after the actual value.
            </summary>
        </member>
        <member name="M:EasyAssertions.TestExpression.OverrideProvider(EasyAssertions.TestExpressionProvider)">
            <summary>
            Overrides the <see cref="T:EasyAssertions.TestExpressionProvider"/> used to provide source representations
            of the current assertion's actual and expected values.
            </summary>
        </member>
        <member name="M:EasyAssertions.TestExpression.DefaultProvider">
            <summary>
            Resets the current <see cref="T:EasyAssertions.TestExpressionProvider"/> to the default provider.
            </summary>
        </member>
        <member name="T:EasyAssertions.TestExpressionProvider">
            <summary>
            Provides source representations for the current assertion's actual and expected values.
            </summary>
        </member>
        <member name="P:EasyAssertions.FailureMessageExpected.Expression">
            <summary>
            The source representation of the expected value, as provided by the parent <see cref="T:EasyAssertions.FailureMessage"/>.
            </summary>
        </member>
        <member name="P:EasyAssertions.FailureMessageExpected.Value">
            <summary>
            The expected value, as provided by the parent <see cref="T:EasyAssertions.FailureMessage"/>.
            </summary>
        </member>
        <member name="T:EasyAssertions.Actual`1">
            <summary>
            A wrapper around the value returned by an assertion, used for chaining further assertions.
            </summary>
        </member>
        <member name="P:EasyAssertions.Actual`1.And">
            <summary>
            Provides access to the actual value, to allow assertions to be chained.
            </summary>
        </member>
        <member name="T:EasyAssertions.FailureMessageFormatter">
            <summary>
            Provides access to a builder for the standard set of assertion failure messages.
            </summary>
        </member>
        <member name="M:EasyAssertions.FailureMessageFormatter.Override(EasyAssertions.IFailureMessageFormatter)">
            <summary>
            Overrides the message formatter used to provide the standard set of assertion failure messages.
            </summary>
        </member>
        <member name="M:EasyAssertions.FailureMessageFormatter.Default">
            <summary>
            Resets the current failure message formatter to the formatter.
            </summary>
        </member>
        <member name="P:EasyAssertions.FailureMessageFormatter.Current">
            <summary>
            The current failure message formatter.
            Can be overriden with <see cref="M:EasyAssertions.FailureMessageFormatter.Override(EasyAssertions.IFailureMessageFormatter)"/>.
            </summary>
        </member>
    </members>
</doc>
